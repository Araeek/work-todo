(()=>{"use strict";function t(t,e,o,n){this.title=t,this.description=e,this.dueDate=o,this.priority=n}function e(t){this.name=t,this.todos=[]}const o=[new e("Default")];function n(t){const n=new e(t);o.push(n)}function i(t,e){o[t].todos.push(e)}function s(){const t=document.querySelector("#project-list");t.innerHTML="";for(let e=0;e<o.length;e++){const n=document.createElement("div");n.classList.add("project"),n.dataset.projectIndex=`${e}`,n.innerHTML=`\n          <h3>${o[e].name}</h3>\n          <div class="project-actions">\n            <button class="project-btn" data-project-index="${e}">\n              <i class="fas fa-edit edit"></i> \n            </button>\n            <button class="project-btn" data-project-index="${e}">\n              <i class="fas fa-trash-alt delete"></i>\n            </button>\n          </div>\n        `,t.appendChild(n)}}function c(t){const e=document.querySelector(".todo-container");document.querySelector("#project-title").textContent=`${o[t].name}`,document.querySelector(".edit-project-btn").dataset.projectIndex=`${t}`,e.innerHTML="";for(let n=0;n<o[t].todos.length;n++){const i=document.createElement("div");i.classList.add("todo"),i.innerHTML=`\n          <h3>${o[t].todos[n].title}</h3>\n          <p>\n            <input type="date" id="date" name="date" value=${o[t].todos[n].dueDate}>\n          </p>\n          <div class="todo-priority">\n            <select class="priority-select">\n              <option value="high" ${"high"===o[t].todos[n].priority?"selected":""}>\n              <div class="priority-circle priority-high"></div>\n              <p class="priority-text-high">high</p>\n              </option>\n              <option value="medium" ${"medium"===o[t].todos[n].priority?"selected":""}>\n              <div class="priority-circle priority-medium"></div>\n              <p class="priority-text-medium">medium</p>\n              </option>\n              <option value="low" ${"low"===o[t].todos[n].priority?"selected":""}>\n              <div class="priority-circle priority-low"></div>\n              <p class="priority-text-low">low</p>\n              </option>\n            </select>\n            \n          </div>\n          <div class="todo-actions">\n            <label class="complete-checkbox">\n              <span class="complete-label-text">Complete</span>\n              <input type="checkbox" name="checkbox">\n              <span class="complete-todo-btn"></span>\n            </label>\n            <button class="edit-todo-btn" data-project-index="${t}">\n              <i class="fas fa-edit"></i> \n            </button>\n            <button class="project-btn" data-project-index="${t}">\n              <i class="fas fa-trash-alt"></i>\n            </button>\n          </div>\n        `,e.appendChild(i)}}document.querySelector(".todo-form-select").addEventListener("change",(function(){switch(this.value){case"high":this.classList.remove("medium"),this.classList.remove("low"),this.classList.add("high");break;case"medium":this.classList.add("medium"),this.classList.remove("low"),this.classList.remove("high");break;case"low":this.classList.remove("medium"),this.classList.add("low"),this.classList.remove("high")}}));const a=document.getElementById("project-add"),r=document.getElementById("project-edit"),d=document.getElementById("project-add-btn"),l=document.querySelectorAll(".close-span"),u=document.querySelector("#project-add-form"),p=document.querySelector("#project-edit-form"),m=document.querySelector("#project-list"),h=document.querySelector(".edit-project-btn"),v=document.querySelector(".add-todo-btn"),g=document.querySelector("#todo-add");function L(t){r.classList.add("show"),document.querySelector("#project-edit-name").value=`${o[t.target.parentNode.getAttribute("data-project-index")].name}`,p.addEventListener("submit",(function e(n){var i,a;n.preventDefault(),r.classList.remove("show"),i=t.target.parentNode.getAttribute("data-project-index"),a=document.querySelector("#project-edit-name").value,o[i].name=a,s(),c(t.target.parentNode.getAttribute("data-project-index")),p.removeEventListener("submit",e)}))}d.onclick=function(){a.classList.add("show")},l.forEach((t=>{t.addEventListener("click",(function(){a.classList.remove("show"),r.classList.remove("show"),g.classList.remove("show")}))})),window.onclick=function(t){t.target!=a&&t.target!=r&&t.target!=g||(a.classList.remove("show"),r.classList.remove("show"),g.classList.remove("show"))},u.addEventListener("submit",(function(t){t.preventDefault(),a.classList.remove("show"),n(document.querySelector("#project-name").value),s()})),m.addEventListener("click",(function(t){var e;t.target.classList.contains("delete")&&(e=t.target.parentNode.getAttribute("data-project-index"),o.splice(e,1),s()),t.target.classList.contains("edit")?L(t):t.target.classList.contains("project")?c(t.target.getAttribute("data-project-index")):c(t.target.parentNode.getAttribute("data-project-index"))})),h.addEventListener("click",(function(t){L(t)})),v.addEventListener("click",(function(){g.classList.add("show")}));const y=new t("Finish project","Complete the assignment","2023-04-01","medium");i(0,y),i(0,y),i(0,y),n("Shopping List"),i(1,new t("Buy groceries","Get eggs, bread, and milk","2023-04-03","medium")),s(),c(0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxjQUFjLGlCQUFpQmdCLE9BQ25EbkIsR0FDRixJQUVBNkIsRUFBWVgsaUJBQWlCLFNBQVMsU0FBVWdCLEdGcENoRCxJQUF1Qk0sRUVxQ2pCTixFQUFFQyxPQUFPMUIsVUFBVXVDLFNBQVMsWUZyQ1hSLEVFc0NMTixFQUFFQyxPQUFPQyxXQUFXQyxhQUFhLHNCRnJDakQ1QyxFQUFTd0QsT0FBT1QsRUFBTyxHRXNDckJ4QyxLQUVFa0MsRUFBRUMsT0FBTzFCLFVBQVV1QyxTQUFTLFFBQzlCZixFQUFZQyxHQUdWQSxFQUFFQyxPQUFPMUIsVUFBVXVDLFNBQVMsV0FDOUJuQyxFQUFZcUIsRUFBRUMsT0FBT0UsYUFBYSx1QkFFbEN4QixFQUFZcUIsRUFBRUMsT0FBT0MsV0FBV0MsYUFBYSxzQkFFakQsSUFFQVAsRUFBV1osaUJBQWlCLFNBQVMsU0FBVWdCLEdBQzdDRCxFQUFZQyxFQUNkLElBRUFILEVBQVdiLGlCQUFpQixTQUFTLFdBQ25DYyxFQUFhdkIsVUFBVUMsSUFBSSxPQUM3QixJQzlEQSxNQUFNd0MsRUFBUSxJQUFJbEUsRUFDaEIsaUJBQ0EsMEJBQ0EsYUFDQSxVQUVGYSxFQUFpQixFQUFHcUQsR0FDcEJyRCxFQUFpQixFQUFHcUQsR0FDcEJyRCxFQUFpQixFQUFHcUQsR0FFcEJ4RCxFQUFXLGlCQU9YRyxFQUFpQixFQU5ILElBQUliLEVBQ2hCLGdCQUNBLDRCQUNBLGFBQ0EsV0FJRmdCLElBQ0FhLEVBQVksRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvdG9kby5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9kZWZhdWx0UHJvamVjdC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2RvbS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBUb2RvKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHkpIHtcclxuICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XHJcbiAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xyXG59XHJcblxyXG5leHBvcnQgeyBUb2RvIH07XHJcbiIsImZ1bmN0aW9uIFByb2plY3QobmFtZSkge1xyXG4gIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgdGhpcy50b2RvcyA9IFtdO1xyXG59XHJcblxyXG5leHBvcnQgeyBQcm9qZWN0IH07XHJcbiIsImltcG9ydCB7IFByb2plY3QgfSBmcm9tICcuL3Byb2plY3QuanMnO1xyXG5cclxuY29uc3QgZGVmYXVsdFByb2plY3QgPSBuZXcgUHJvamVjdChcIkRlZmF1bHRcIik7XHJcblxyXG5leHBvcnQgeyBkZWZhdWx0UHJvamVjdCB9O1xyXG4iLCJpbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSBcIi4vcHJvamVjdC5qc1wiO1xyXG5pbXBvcnQgeyBkZWZhdWx0UHJvamVjdCB9IGZyb20gXCIuL2RlZmF1bHRQcm9qZWN0LmpzXCI7XHJcblxyXG5jb25zdCBwcm9qZWN0cyA9IFtkZWZhdWx0UHJvamVjdF07XHJcblxyXG5mdW5jdGlvbiBhZGRQcm9qZWN0KG5hbWUpIHtcclxuICBjb25zdCBwcm9qZWN0ID0gbmV3IFByb2plY3QobmFtZSk7XHJcbiAgcHJvamVjdHMucHVzaChwcm9qZWN0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlUHJvamVjdChpbmRleCkge1xyXG4gIHByb2plY3RzLnNwbGljZShpbmRleCwgMSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVkaXRQcm9qZWN0TmFtZShpbmRleCwgbmV3TmFtZSkge1xyXG4gIHByb2plY3RzW2luZGV4XS5uYW1lID0gbmV3TmFtZTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkVG9kb1RvUHJvamVjdChwcm9qZWN0SW5kZXgsIHRvZG8pIHtcclxuICBwcm9qZWN0c1twcm9qZWN0SW5kZXhdLnRvZG9zLnB1c2godG9kbyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXBsZXRlVG9kbyhwcm9qZWN0SW5kZXgsIHRvZG9JbmRleCkge1xyXG4gIHByb2plY3RzW3Byb2plY3RJbmRleF0udG9kb3NbdG9kb0luZGV4XS5jb21wbGV0ZWQgPSB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VUb2RvUHJpb3JpdHkocHJvamVjdEluZGV4LCB0b2RvSW5kZXgsIHByaW9yaXR5KSB7XHJcbiAgcHJvamVjdHNbcHJvamVjdEluZGV4XS50b2Rvc1t0b2RvSW5kZXhdLnByaW9yaXR5ID0gcHJpb3JpdHk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVRvZG9Gcm9tUHJvamVjdChwcm9qZWN0SW5kZXgsIHRvZG9JbmRleCkge1xyXG4gIHByb2plY3RzW3Byb2plY3RJbmRleF0udG9kb3Muc3BsaWNlKHRvZG9JbmRleCwgMSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgYWRkUHJvamVjdCxcclxuICByZW1vdmVQcm9qZWN0LFxyXG4gIGVkaXRQcm9qZWN0TmFtZSxcclxuICBhZGRUb2RvVG9Qcm9qZWN0LFxyXG4gIGNvbXBsZXRlVG9kbyxcclxuICBjaGFuZ2VUb2RvUHJpb3JpdHksXHJcbiAgcmVtb3ZlVG9kb0Zyb21Qcm9qZWN0LFxyXG4gIHByb2plY3RzLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBwcm9qZWN0cyB9IGZyb20gXCIuL2FwcFwiO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlUHJvamVjdHMoKSB7XHJcbiAgY29uc3QgcHJvamVjdExpc3REaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtbGlzdFwiKTtcclxuICBwcm9qZWN0TGlzdERpdi5pbm5lckhUTUwgPSBcIlwiO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvamVjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IHByb2plY3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgcHJvamVjdERpdi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKTtcclxuICAgIHByb2plY3REaXYuZGF0YXNldC5wcm9qZWN0SW5kZXggPSBgJHtpfWA7XHJcbiAgICBwcm9qZWN0RGl2LmlubmVySFRNTCA9IGBcclxuICAgICAgICAgIDxoMz4ke3Byb2plY3RzW2ldLm5hbWV9PC9oMz5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9qZWN0LWFjdGlvbnNcIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInByb2plY3QtYnRuXCIgZGF0YS1wcm9qZWN0LWluZGV4PVwiJHtpfVwiPlxyXG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWVkaXQgZWRpdFwiPjwvaT4gXHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJvamVjdC1idG5cIiBkYXRhLXByb2plY3QtaW5kZXg9XCIke2l9XCI+XHJcbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdHJhc2gtYWx0IGRlbGV0ZVwiPjwvaT5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgO1xyXG4gICAgcHJvamVjdExpc3REaXYuYXBwZW5kQ2hpbGQocHJvamVjdERpdik7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVUb2Rvcyhwcm9qZWN0SW5kZXhOdW1iZXIpIHtcclxuICBjb25zdCB0b2RvTGlzdERpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9kby1jb250YWluZXJcIik7XHJcbiAgY29uc3QgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0LXRpdGxlXCIpO1xyXG4gIHByb2plY3RUaXRsZS50ZXh0Q29udGVudCA9IGAke3Byb2plY3RzW3Byb2plY3RJbmRleE51bWJlcl0ubmFtZX1gO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWRpdC1wcm9qZWN0LWJ0blwiKS5kYXRhc2V0LnByb2plY3RJbmRleCA9IGAke3Byb2plY3RJbmRleE51bWJlcn1gO1xyXG4gIHRvZG9MaXN0RGl2LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0c1twcm9qZWN0SW5kZXhOdW1iZXJdLnRvZG9zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCB0b2RvRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHRvZG9EaXYuY2xhc3NMaXN0LmFkZChcInRvZG9cIik7XHJcbiAgICB0b2RvRGl2LmlubmVySFRNTCA9IGBcclxuICAgICAgICAgIDxoMz4ke3Byb2plY3RzW3Byb2plY3RJbmRleE51bWJlcl0udG9kb3NbaV0udGl0bGV9PC9oMz5cclxuICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImRhdGVcIiBpZD1cImRhdGVcIiBuYW1lPVwiZGF0ZVwiIHZhbHVlPSR7XHJcbiAgICAgICAgICAgICAgcHJvamVjdHNbcHJvamVjdEluZGV4TnVtYmVyXS50b2Rvc1tpXS5kdWVEYXRlXHJcbiAgICAgICAgICAgIH0+XHJcbiAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9kby1wcmlvcml0eVwiPlxyXG4gICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwicHJpb3JpdHktc2VsZWN0XCI+XHJcbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImhpZ2hcIiAke1xyXG4gICAgICAgICAgICAgICAgcHJvamVjdHNbcHJvamVjdEluZGV4TnVtYmVyXS50b2Rvc1tpXS5wcmlvcml0eSA9PT0gXCJoaWdoXCJcclxuICAgICAgICAgICAgICAgICAgPyBcInNlbGVjdGVkXCJcclxuICAgICAgICAgICAgICAgICAgOiBcIlwiXHJcbiAgICAgICAgICAgICAgfT5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpb3JpdHktY2lyY2xlIHByaW9yaXR5LWhpZ2hcIj48L2Rpdj5cclxuICAgICAgICAgICAgICA8cCBjbGFzcz1cInByaW9yaXR5LXRleHQtaGlnaFwiPmhpZ2g8L3A+XHJcbiAgICAgICAgICAgICAgPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm1lZGl1bVwiICR7XHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0c1twcm9qZWN0SW5kZXhOdW1iZXJdLnRvZG9zW2ldLnByaW9yaXR5ID09PSBcIm1lZGl1bVwiXHJcbiAgICAgICAgICAgICAgICAgID8gXCJzZWxlY3RlZFwiXHJcbiAgICAgICAgICAgICAgICAgIDogXCJcIlxyXG4gICAgICAgICAgICAgIH0+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByaW9yaXR5LWNpcmNsZSBwcmlvcml0eS1tZWRpdW1cIj48L2Rpdj5cclxuICAgICAgICAgICAgICA8cCBjbGFzcz1cInByaW9yaXR5LXRleHQtbWVkaXVtXCI+bWVkaXVtPC9wPlxyXG4gICAgICAgICAgICAgIDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJsb3dcIiAke1xyXG4gICAgICAgICAgICAgICAgcHJvamVjdHNbcHJvamVjdEluZGV4TnVtYmVyXS50b2Rvc1tpXS5wcmlvcml0eSA9PT0gXCJsb3dcIlxyXG4gICAgICAgICAgICAgICAgICA/IFwic2VsZWN0ZWRcIlxyXG4gICAgICAgICAgICAgICAgICA6IFwiXCJcclxuICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmlvcml0eS1jaXJjbGUgcHJpb3JpdHktbG93XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgPHAgY2xhc3M9XCJwcmlvcml0eS10ZXh0LWxvd1wiPmxvdzwvcD5cclxuICAgICAgICAgICAgICA8L29wdGlvbj5cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9kby1hY3Rpb25zXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbXBsZXRlLWNoZWNrYm94XCI+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjb21wbGV0ZS1sYWJlbC10ZXh0XCI+Q29tcGxldGU8L3NwYW4+XHJcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja2JveFwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY29tcGxldGUtdG9kby1idG5cIj48L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRvZG8tYnRuXCIgZGF0YS1wcm9qZWN0LWluZGV4PVwiJHtwcm9qZWN0SW5kZXhOdW1iZXJ9XCI+XHJcbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZWRpdFwiPjwvaT4gXHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJvamVjdC1idG5cIiBkYXRhLXByb2plY3QtaW5kZXg9XCIke3Byb2plY3RJbmRleE51bWJlcn1cIj5cclxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS10cmFzaC1hbHRcIj48L2k+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIHRvZG9MaXN0RGl2LmFwcGVuZENoaWxkKHRvZG9EaXYpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZXhwYW5kVG9kbyhwcm9qZWN0SW5kZXgsIHRvZG9JbmRleCkge1xyXG4gIC8vIGNvbnN0IHRvZG8gPSBwcm9qZWN0c1twcm9qZWN0SW5kZXhdLnRvZG9zW3RvZG9JbmRleF07XHJcbiAgLy8gdG9kb0RldGFpbHNEaXYuaW5uZXJIVE1MID0gYFxyXG4gIC8vICAgICAgIDxoMz4ke3RvZG8udGl0bGV9PC9oMz5cclxuICAvLyAgICAgICA8cD4ke3RvZG8uZGVzY3JpcHRpb259PC9wPlxyXG4gIC8vICAgICAgIDxwPkR1ZSBEYXRlOiAke3RvZG8uZHVlRGF0ZX08L3A+XHJcbiAgLy8gICAgICAgPHA+UHJpb3JpdHk6ICR7dG9kby5wcmlvcml0eX08L3A+XHJcbiAgLy8gICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtdG9kby1idG5cIiBkYXRhLXByb2plY3QtaW5kZXg9XCIke3Byb2plY3RJbmRleH1cIiBkYXRhLXRvZG8taW5kZXg9XCIke3RvZG9JbmRleH1cIj5FZGl0PC9idXR0b24+XHJcbiAgLy8gICAgIGA7XHJcbn1cclxuXHJcbmNvbnN0IHRvZG9Gb3JtUHJpb2lyaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50b2RvLWZvcm0tc2VsZWN0XCIpO1xyXG50b2RvRm9ybVByaW9pcml0eS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKCl7XHJcbiAgc3dpdGNoICh0aGlzLnZhbHVlKSB7XHJcbiAgICBjYXNlIFwiaGlnaFwiOlxyXG4gICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoXCJtZWRpdW1cIik7XHJcbiAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZShcImxvd1wiKTtcclxuICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKFwiaGlnaFwiKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwibWVkaXVtXCI6XHJcbiAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChcIm1lZGl1bVwiKTtcclxuICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwibG93XCIpO1xyXG4gICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWdoXCIpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJsb3dcIjpcclxuICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwibWVkaXVtXCIpO1xyXG4gICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoXCJsb3dcIik7XHJcbiAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZShcImhpZ2hcIik7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxufSlcclxuXHJcbmV4cG9ydCB7IHVwZGF0ZVByb2plY3RzLCB1cGRhdGVUb2RvcywgZXhwYW5kVG9kbyB9O1xyXG4iLCJpbXBvcnQgeyBwcm9qZWN0cyB9IGZyb20gXCIuL2FwcFwiO1xyXG5pbXBvcnQgeyB1cGRhdGVQcm9qZWN0cywgdXBkYXRlVG9kb3MgfSBmcm9tIFwiLi9kb21cIjtcclxuaW1wb3J0IHsgYWRkUHJvamVjdCwgcmVtb3ZlUHJvamVjdCwgZWRpdFByb2plY3ROYW1lIH0gZnJvbSBcIi4vYXBwXCI7XHJcblxyXG5jb25zdCBwcm9qZWN0QWRkTW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3QtYWRkXCIpO1xyXG5jb25zdCBwcm9qZWN0RWRpdE1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0LWVkaXRcIik7XHJcbmNvbnN0IHByb2plY3RBZGRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3QtYWRkLWJ0blwiKTtcclxuY29uc3QgY2xvc2VTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jbG9zZS1zcGFuXCIpO1xyXG5jb25zdCBwcm9qZWN0QWRkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1hZGQtZm9ybVwiKTtcclxuY29uc3QgcHJvamVjdEVkaXRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0LWVkaXQtZm9ybVwiKTtcclxuY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtbGlzdFwiKTtcclxuY29uc3QgZWRpdEhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWRpdC1wcm9qZWN0LWJ0blwiKTtcclxuY29uc3QgYWRkVG9kb0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRvZG8tYnRuXCIpO1xyXG5jb25zdCB0b2RvQWRkTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3RvZG8tYWRkXCIpO1xyXG5cclxucHJvamVjdEFkZEJ0bi5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gIHByb2plY3RBZGRNb2RhbC5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKTtcclxufTtcclxuXHJcbmNsb3NlU3Bhbi5mb3JFYWNoKChzcGFuKSA9PiB7XHJcbiAgc3Bhbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgcHJvamVjdEFkZE1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpO1xyXG4gICAgcHJvamVjdEVkaXRNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcclxuICAgIHRvZG9BZGRNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcclxuICB9KTtcclxufSk7XHJcblxyXG53aW5kb3cub25jbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gIGlmIChcclxuICAgIGV2ZW50LnRhcmdldCA9PSBwcm9qZWN0QWRkTW9kYWwgfHxcclxuICAgIGV2ZW50LnRhcmdldCA9PSBwcm9qZWN0RWRpdE1vZGFsIHx8XHJcbiAgICBldmVudC50YXJnZXQgPT0gdG9kb0FkZE1vZGFsXHJcbiAgKSB7XHJcbiAgICBwcm9qZWN0QWRkTW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XHJcbiAgICBwcm9qZWN0RWRpdE1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpO1xyXG4gICAgdG9kb0FkZE1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpO1xyXG4gIH1cclxufTtcclxuXHJcbnByb2plY3RBZGRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICBwcm9qZWN0QWRkTW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XHJcbiAgYWRkUHJvamVjdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtbmFtZVwiKS52YWx1ZSk7XHJcbiAgdXBkYXRlUHJvamVjdHMoKTtcclxufSk7XHJcblxyXG5wcm9qZWN0TGlzdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcclxuICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGVsZXRlXCIpKSB7XHJcbiAgICByZW1vdmVQcm9qZWN0KGUudGFyZ2V0LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1wcm9qZWN0LWluZGV4XCIpKTtcclxuICAgIHVwZGF0ZVByb2plY3RzKCk7XHJcbiAgfVxyXG4gIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJlZGl0XCIpKSB7XHJcbiAgICBlZGl0UHJvamVjdChlKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInByb2plY3RcIikpIHtcclxuICAgIHVwZGF0ZVRvZG9zKGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtcHJvamVjdC1pbmRleFwiKSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHVwZGF0ZVRvZG9zKGUudGFyZ2V0LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1wcm9qZWN0LWluZGV4XCIpKTtcclxuICB9XHJcbn0pO1xyXG5cclxuZWRpdEhlYWRlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcclxuICBlZGl0UHJvamVjdChlKTtcclxufSk7XHJcblxyXG5hZGRUb2RvQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgdG9kb0FkZE1vZGFsLmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGVkaXRQcm9qZWN0KGUpIHtcclxuICBwcm9qZWN0RWRpdE1vZGFsLmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1lZGl0LW5hbWVcIikudmFsdWUgPSBgJHtcclxuICAgIHByb2plY3RzW2UudGFyZ2V0LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1wcm9qZWN0LWluZGV4XCIpXS5uYW1lXHJcbiAgfWA7XHJcbiAgcHJvamVjdEVkaXRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gX2xpc3RlbmVyKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgcHJvamVjdEVkaXRNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcclxuICAgIGVkaXRQcm9qZWN0TmFtZShcclxuICAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByb2plY3QtaW5kZXhcIiksXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdC1lZGl0LW5hbWVcIikudmFsdWVcclxuICAgICk7XHJcbiAgICB1cGRhdGVQcm9qZWN0cygpO1xyXG4gICAgdXBkYXRlVG9kb3MoZS50YXJnZXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByb2plY3QtaW5kZXhcIikpO1xyXG4gICAgcHJvamVjdEVkaXRGb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgX2xpc3RlbmVyKTtcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQgeyBUb2RvIH0gZnJvbSBcIi4vdG9kby5qc1wiO1xyXG5pbXBvcnQgeyB1cGRhdGVQcm9qZWN0cywgdXBkYXRlVG9kb3MsIGV4cGFuZFRvZG8gfSBmcm9tIFwiLi9kb20uanNcIjtcclxuaW1wb3J0IHsgYWRkUHJvamVjdCwgYWRkVG9kb1RvUHJvamVjdCB9IGZyb20gXCIuL2FwcC5qc1wiO1xyXG5pbXBvcnQgXCIuL2NvbnRyb2xsZXIuanNcIlxyXG5cclxuXHJcbmNvbnN0IHRvZG8xID0gbmV3IFRvZG8oXHJcbiAgXCJGaW5pc2ggcHJvamVjdFwiLFxyXG4gIFwiQ29tcGxldGUgdGhlIGFzc2lnbm1lbnRcIixcclxuICBcIjIwMjMtMDQtMDFcIixcclxuICBcIm1lZGl1bVwiXHJcbik7XHJcbmFkZFRvZG9Ub1Byb2plY3QoMCwgdG9kbzEpO1xyXG5hZGRUb2RvVG9Qcm9qZWN0KDAsIHRvZG8xKTtcclxuYWRkVG9kb1RvUHJvamVjdCgwLCB0b2RvMSk7XHJcblxyXG5hZGRQcm9qZWN0KFwiU2hvcHBpbmcgTGlzdFwiKTtcclxuY29uc3QgdG9kbzIgPSBuZXcgVG9kbyhcclxuICBcIkJ1eSBncm9jZXJpZXNcIixcclxuICBcIkdldCBlZ2dzLCBicmVhZCwgYW5kIG1pbGtcIixcclxuICBcIjIwMjMtMDQtMDNcIixcclxuICBcIm1lZGl1bVwiXHJcbik7XHJcbmFkZFRvZG9Ub1Byb2plY3QoMSwgdG9kbzIpO1xyXG5cclxudXBkYXRlUHJvamVjdHMoKTtcclxudXBkYXRlVG9kb3MoMCk7XHJcbmV4cGFuZFRvZG8oMCwgMCk7XHJcblxyXG4iXSwibmFtZXMiOlsiVG9kbyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJ0aGlzIiwiUHJvamVjdCIsIm5hbWUiLCJ0b2RvcyIsInByb2plY3RzIiwiYWRkUHJvamVjdCIsInByb2plY3QiLCJwdXNoIiwiYWRkVG9kb1RvUHJvamVjdCIsInByb2plY3RJbmRleCIsInRvZG8iLCJ1cGRhdGVQcm9qZWN0cyIsInByb2plY3RMaXN0RGl2IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiaSIsImxlbmd0aCIsInByb2plY3REaXYiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZGF0YXNldCIsImFwcGVuZENoaWxkIiwidXBkYXRlVG9kb3MiLCJwcm9qZWN0SW5kZXhOdW1iZXIiLCJ0b2RvTGlzdERpdiIsInRleHRDb250ZW50IiwidG9kb0RpdiIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YWx1ZSIsInJlbW92ZSIsInByb2plY3RBZGRNb2RhbCIsImdldEVsZW1lbnRCeUlkIiwicHJvamVjdEVkaXRNb2RhbCIsInByb2plY3RBZGRCdG4iLCJjbG9zZVNwYW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwicHJvamVjdEFkZEZvcm0iLCJwcm9qZWN0RWRpdEZvcm0iLCJwcm9qZWN0TGlzdCIsImVkaXRIZWFkZXIiLCJhZGRUb2RvQnRuIiwidG9kb0FkZE1vZGFsIiwiZWRpdFByb2plY3QiLCJlIiwidGFyZ2V0IiwicGFyZW50Tm9kZSIsImdldEF0dHJpYnV0ZSIsIl9saXN0ZW5lciIsImV2ZW50IiwiaW5kZXgiLCJuZXdOYW1lIiwicHJldmVudERlZmF1bHQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25jbGljayIsImZvckVhY2giLCJzcGFuIiwid2luZG93IiwiY29udGFpbnMiLCJzcGxpY2UiLCJ0b2RvMSJdLCJzb3VyY2VSb290IjoiIn0=