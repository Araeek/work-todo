(()=>{"use strict";function t(t,e,o,n){this.title=t,this.dueDate=e,this.priority=o,this.complete=n}function e(t){this.name=t,this.todos=[]}const o=[new e("Default")];function n(t){const n=new e(t);o.push(n)}function s(t,e){o[t].todos.push(e)}function c(){const t=document.querySelector("#project-list");t.innerHTML="";for(let e=0;e<o.length;e++){const n=document.createElement("div");n.classList.add("project"),n.dataset.projectIndex=`${e}`,n.innerHTML=`\n          <h3>${o[e].name}</h3>\n          <div class="project-actions">\n            <button class="project-btn" data-project-index="${e}">\n              <i class="fas fa-edit edit"></i> \n            </button>\n            <button class="project-btn" data-project-index="${e}">\n              <i class="fas fa-trash-alt delete"></i>\n            </button>\n          </div>\n        `,t.appendChild(n)}}function a(t){const e=document.querySelector(".todo-container");document.querySelector("#project-title").textContent=`${o[t].name}`,document.querySelector(".project-title-section").dataset.projectIndex=`${t}`,document.querySelector(".edit-project-btn").dataset.projectIndex=`${t}`,document.querySelector(".todo-container").dataset.projectIndex=`${t}`,e.innerHTML="";for(let n=0;n<o[t].todos.length;n++){const s=document.createElement("div");s.classList.add("todo"),s.dataset.todoIndex=n,s.innerHTML=`\n          <h3>${o[t].todos[n].title}</h3>\n          <p>\n            <input type="date" id="date" name="date" value=${o[t].todos[n].dueDate}>\n          </p>\n          <div class="todo-priority">\n            <select class="priority-select">\n              <option value="high" ${"high"===o[t].todos[n].priority?"selected":""}>high\n              </option>\n              <option value="medium" ${"medium"===o[t].todos[n].priority?"selected":""}>medium\n              </option>\n              <option value="low" ${"low"===o[t].todos[n].priority?"selected":""}>low\n              </option>\n            </select>\n            \n          </div>\n          <div class="todo-actions">\n            <label class="complete-checkbox">\n              <span class="complete-label-text">Complete</span>\n              <input class=todo-complete type="checkbox" name="checkbox" ${o[t].todos[n].complete?"checked":""}>\n              <span class="complete-todo-btn"></span>\n            </label>\n            <button class="edit-todo-btn">\n              <i class="fas fa-edit"></i> \n            </button>\n            <button class="project-btn">\n              <i class="fas fa-trash-alt delete-todo"></i>\n            </button>\n          </div>\n        `,e.appendChild(s)}}document.querySelector(".todo-form-select").addEventListener("change",(function(){switch(this.value){case"high":this.classList.remove("medium"),this.classList.remove("low"),this.classList.add("high");break;case"medium":this.classList.add("medium"),this.classList.remove("low"),this.classList.remove("high");break;case"low":this.classList.remove("medium"),this.classList.add("low"),this.classList.remove("high")}}));const d=document.getElementById("project-add"),i=document.getElementById("project-edit"),r=document.getElementById("project-add-btn"),l=document.querySelectorAll(".close-span"),u=document.querySelector("#project-add-form"),p=document.querySelector("#project-edit-form"),m=document.querySelector("#project-list"),h=document.querySelector(".edit-project-btn"),v=document.querySelector(".add-todo-btn"),L=document.querySelector("#todo-add"),f=document.querySelector("#todo-add-form"),g=document.querySelector(".todo-container");function j(t){i.classList.add("show"),document.querySelector("#project-edit-name").value=`${o[t.target.parentNode.getAttribute("data-project-index")].name}`,p.addEventListener("submit",(function e(n){var s,d;n.preventDefault(),i.classList.remove("show"),s=t.target.parentNode.getAttribute("data-project-index"),d=document.querySelector("#project-edit-name").value,o[s].name=d,c(),a(t.target.parentNode.getAttribute("data-project-index")),p.removeEventListener("submit",e)}))}r.onclick=function(){d.classList.add("show")},l.forEach((t=>{t.addEventListener("click",(function(){d.classList.remove("show"),i.classList.remove("show"),L.classList.remove("show")}))})),window.onclick=function(t){t.target!=d&&t.target!=i&&t.target!=L||(d.classList.remove("show"),i.classList.remove("show"),L.classList.remove("show"))},u.addEventListener("submit",(function(t){t.preventDefault(),d.classList.remove("show"),n(document.querySelector("#project-name").value),c()})),m.addEventListener("click",(function(t){var e;t.target.classList.contains("delete")&&(e=t.target.parentNode.getAttribute("data-project-index"),o.splice(e,1),c()),t.target.classList.contains("edit")?j(t):t.target.classList.contains("project")?a(t.target.getAttribute("data-project-index")):a(t.target.parentNode.getAttribute("data-project-index"))})),h.addEventListener("click",(function(t){j(t)})),v.addEventListener("click",(function(){L.classList.add("show")})),f.addEventListener("submit",(function(e){e.preventDefault(),L.classList.remove("show");const o=new FormData(f),n=Object.fromEntries(o.entries()),c=new t(n.title,n["due-date"],n.priority,n.complete);s(document.querySelector(".todo-container").dataset.projectIndex,c),a(document.querySelector(".todo-container").dataset.projectIndex)})),g.addEventListener("click",(function(t){if(t.target.classList.contains("delete-todo")){const n=document.querySelector(".todo-container").dataset.projectIndex;e=t.target.parentNode.parentNode.parentNode.dataset.todoIndex,o[n].todos.splice(e,1),a(n)}var e})),g.addEventListener("change",(function(t){const e=document.querySelector(".todo-container").dataset.projectIndex;t.target.classList.contains("todo-complete")&&function(t,e,n){o[t].todos[e].complete=n}(e,t.target.parentNode.parentNode.parentNode.dataset.todoIndex,t.target.checked),t.target.classList.contains("priority-select")&&function(t,e,n){o[t].todos[e].priority=n}(e,t.target.parentNode.parentNode.dataset.todoIndex,t.target.value),a(e)}));const y=new t("Finish project","2023-04-01","medium",!0);s(0,y),s(0,y),s(0,y),n("Shopping List"),s(1,new t("Buy groceries","2023-04-03","medium",!0)),c(),a(0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,